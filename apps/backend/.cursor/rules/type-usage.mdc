---
description: 
globs: 
alwaysApply: true
---
# Backend Type Usage Patterns

- Use entity types generated by Prisma (e.g., `Prisma.MyEntity`) for all database models and API responses.
- **Do not define custom entity types or interfaces in `src/types/` if a Prisma-generated type exists for that entity.**
- If you find custom entity types or interfaces in `src/types/` that duplicate or overlap with Prisma models (e.g., `FeatureFlag`), you **must** refactor them to use the Prisma-generated types instead. Remove the custom type/interface and update all usages.
- Use types inferred from Zod (or other validators) for request payloads (e.g., `z.infer<typeof createFeatureFlagSchema>`).
- Only define custom types or interfaces in `src/types/` for additional, non-entity-specific needs (e.g., DTOs, API payloads, or view models that do not map 1:1 to a Prisma entity or validator).
- **Always import and use the Prisma client singleton from `src/database/client.ts`.** Do **not** import or instantiate `PrismaClient` directly from `../lib/prisma/client` in any other file. This ensures a single instance and consistent usage across the codebase.
- **This rule overrides any other rule or practice.** If there is a conflict, always follow this rule for type usage.
- If you discover existing violations (such as `src/types/issue-type.ts`), create an issue or PR to migrate to the correct usage and remove the duplicate type.

## Example

```ts
// For input validation and typing
import { createMyEntitySchema } from '../validators/my-entity';
import { z } from 'zod';
type CreateMyEntityInput = z.infer<typeof createMyEntitySchema>;

// For output (database entity)
import type { FeatureFlag } from '../database/prisma'; // Use the Prisma-generated type

// For Prisma client usage
import { prisma } from '../database/client'; // Always use the singleton
```

This ensures type safety, reduces duplication, and keeps your API contracts in sync with your DB and validation logic.

For folder structure, see the `folder-structure.mdc` rule.

## Prisma Entity Type Usage
- All backend code must use the entity types generated by Prisma for database models (e.g., `import type { Issue } from '../database/prisma'`).
- Do not manually duplicate or redefine entity types that are already generated by Prisma.
- Only define DTOs or types for request/response shapes that differ from the Prisma model.
- If you find custom entity types in `src/types/` that duplicate Prisma models, refactor them to use the Prisma-generated types.
