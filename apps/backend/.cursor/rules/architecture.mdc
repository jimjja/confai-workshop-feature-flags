---
description: 
globs: 
alwaysApply: true
---
# Backend Architecture

- Use a simple N-Tier (Layered) architecture for clarity and maintainability.
- **Layer Responsibilities:**
  - **Routes:** Handle HTTP requests and responses, delegate to controllers. Each domain's routes must be defined in its own file and mounted in the main router with a prefix (e.g., `/ping`).
  - **Controllers:** Orchestrate validation, business logic, and response formatting.
  - **Services:** Contain business logic, interact with the data access layer (Prisma).
  - **Data Access Layer:** Use Prisma client for all database operations. All service and business logic should import the Prisma client singleton from a single source (e.g., `src/database/client.ts` for types, and the generated client for the instance).
  - **Shared/Utility Layer:** Helpers, validators, middlewares, etc.
- Keep each layer focused on its responsibility and avoid tight coupling between layers.
- Place cross-cutting concerns (e.g., logging, metrics, authentication, authorization) in `src/middlewares/` or `src/lib/` as appropriate.
- Use middlewares for request/response lifecycle hooks (e.g., auth, logging, error handling).
- Use `src/lib/` for reusable utilities (e.g., logger, metrics client) that may be used across services and middlewares.
- Ensure cross-cutting modules are decoupled and composable.

For folder structure, validation, routing, and type usage, see the dedicated rules in this directory.
